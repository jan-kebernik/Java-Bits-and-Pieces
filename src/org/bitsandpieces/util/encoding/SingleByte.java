/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bitsandpieces.util.encoding;

// default impls
final class SingleByte {

	private SingleByte() {
	}

	// encoder
	static final class EncoderASCII extends SingleByteEncoder {

		@Override
		public Encoding encoding() {
			return Encoding.ASCII;
		}
	}

	static final class EncoderISO_8859_1 extends SingleByteEncoder {

		@Override
		boolean isInDirectRange(char c) {
			return c < '\u0100';
		}

		@Override
		public Encoding encoding() {
			return Encoding.ISO_8859_1;
		}
	}

	static final class EncoderCP1250 extends SingleByteEncoder {

		// collision-free hash table for CP1250 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			0x02c700a1, INVALID_ID, INVALID_ID, 0x013900c5, INVALID_ID, INVALID_ID, 0x00ab00ab, INVALID_ID,
			0x00e400e4, 0x0164008d, INVALID_ID, INVALID_ID, 0x00d600d6, INVALID_ID, INVALID_ID, 0x010f00ef,
			INVALID_ID, 0x014800f2, INVALID_ID, INVALID_ID, INVALID_ID, 0x013a00e5, 0x00f300f3, INVALID_ID,
			0x00ac00ac, 0x201c0093, INVALID_ID, 0x0165009d, INVALID_ID, INVALID_ID, 0x00d700d7, INVALID_ID,
			INVALID_ID, 0x011000d0, 0x00c900c9, 0x2039008b, INVALID_ID, 0x010200c3, 0x00bb00bb, INVALID_ID,
			0x00f400f4, INVALID_ID, 0x00ad00ad, 0x201d0094, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x015800d8, 0x02d800a2, 0x011100f0, INVALID_ID, 0x203a009b, INVALID_ID, 0x010300e3,
			INVALID_ID, 0x20ac0080, INVALID_ID, INVALID_ID, 0x00ae00ae, 0x201e0084, 0x00e700e7, INVALID_ID,
			0x00a000a0, INVALID_ID, INVALID_ID, 0x015900f8, 0x02d900ff, INVALID_ID, 0x00cb00cb, INVALID_ID,
			INVALID_ID, 0x010400a5, INVALID_ID, 0x013d00bc, 0x00f600f6, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00da00da, 0x015a008c, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x010500b9, INVALID_ID, 0x013e00be, 0x00f700f7, INVALID_ID,
			0x00b000b0, 0x20200086, 0x00e900e9, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x015b009c,
			0x02db00b2, INVALID_ID, 0x00cd00cd, INVALID_ID, INVALID_ID, 0x010600c6, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00b100b1, 0x20210087, INVALID_ID, INVALID_ID, INVALID_ID, 0x20130096,
			0x00dc00dc, INVALID_ID, INVALID_ID, INVALID_ID, 0x00ce00ce, INVALID_ID, INVALID_ID, 0x010700e6,
			INVALID_ID, 0x20300089, INVALID_ID, 0x0179008f, 0x21220099, 0x20220095, 0x00eb00eb, INVALID_ID,
			0x00a400a4, 0x20140097, 0x00dd00dd, INVALID_ID, 0x02dd00bd, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00c100c1, 0x014100a3, 0x00fa00fa, 0x017a009f, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x015e00aa, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x015000d5, INVALID_ID, INVALID_ID, 0x00c200c2, 0x014200b3, INVALID_ID, 0x017b00af,
			0x00b400b4, INVALID_ID, 0x00ed00ed, INVALID_ID, 0x00a600a6, INVALID_ID, 0x00df00df, 0x015f00ba,
			INVALID_ID, 0x011800ca, INVALID_ID, 0x015100f5, INVALID_ID, INVALID_ID, INVALID_ID, 0x014300d1,
			0x00fc00fc, 0x017c00bf, 0x00b500b5, INVALID_ID, 0x00ee00ee, 0x016e00d9, 0x00a700a7, INVALID_ID,
			INVALID_ID, 0x0160008a, INVALID_ID, 0x011900ea, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00c400c4, 0x014400f1, 0x00fd00fd, 0x017d008e, 0x00b600b6, 0x20260085, INVALID_ID, 0x016f00f9,
			0x00a800a8, 0x20180091, 0x00e100e1, 0x0161009a, INVALID_ID, 0x011a00cc, 0x00d300d3, INVALID_ID,
			INVALID_ID, 0x010c00c8, INVALID_ID, INVALID_ID, INVALID_ID, 0x017e009e, 0x00b700b7, INVALID_ID,
			INVALID_ID, 0x017000db, 0x00a900a9, 0x20190092, 0x00e200e2, 0x016200de, INVALID_ID, 0x011b00ec,
			0x00d400d4, 0x015400c0, INVALID_ID, 0x010d00e8, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00b800b8, INVALID_ID, INVALID_ID, 0x017100fb, INVALID_ID, 0x201a0082, INVALID_ID, 0x016300fe,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x015500e0, INVALID_ID, 0x010e00cf, 0x00c700c7, 0x014700d2
		};

		@Override
		int convert(int c) {
			return TABLE[(((c * 4609) >>> 8) ^ (c >>> 13)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1250;
		}
	}

	static final class EncoderCP1251 extends SingleByteEncoder {

		// collision-free hash table for CP1251 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x20180091, 0x20190092, 0x201a0082, INVALID_ID, 0x201c0093, 0x201d0094, 0x201e0084,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20130096, 0x20140097, INVALID_ID, INVALID_ID,
			0x20260085, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x20200086, 0x20210087, 0x20220095, INVALID_ID, INVALID_ID, 0x211600b9,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x2039008b, 0x203a009b, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x20300089, 0x21220099, INVALID_ID, INVALID_ID, INVALID_ID,
			0x040100a8, INVALID_ID, 0x04030081, 0x04020080, 0x040500bd, 0x040400aa, 0x040700af, 0x040600b2,
			0x0409008a, 0x040800a3, 0x040b008e, 0x040a008c, INVALID_ID, 0x040c008d, 0x040f008f, 0x040e00a1,
			0x041000c0, INVALID_ID, 0x041200c2, 0x041100c1, 0x041400c4, 0x041300c3, 0x041600c6, 0x041500c5,
			0x041800c8, 0x041700c7, 0x041a00ca, 0x041900c9, 0x041c00cc, 0x041b00cb, 0x041e00ce, 0x041d00cd,
			INVALID_ID, 0x041f00cf, 0x042100d1, 0x042000d0, 0x042300d3, 0x042200d2, 0x042500d5, 0x042400d4,
			0x042700d7, 0x042600d6, 0x042900d9, 0x042800d8, 0x042b00db, 0x042a00da, 0x042d00dd, 0x042c00dc,
			0x042f00df, 0x042e00de, 0x043000e0, INVALID_ID, 0x043200e2, 0x043100e1, 0x043400e4, 0x043300e3,
			0x043600e6, 0x043500e5, 0x043800e8, 0x043700e7, 0x043a00ea, 0x043900e9, 0x043c00ec, 0x043b00eb,
			0x043e00ee, 0x043d00ed, INVALID_ID, 0x043f00ef, 0x044100f1, 0x044000f0, 0x044300f3, 0x044200f2,
			0x044500f5, 0x044400f4, 0x044700f7, 0x044600f6, 0x044900f9, 0x044800f8, 0x044b00fb, 0x044a00fa,
			0x044d00fd, 0x044c00fc, 0x044f00ff, 0x044e00fe, INVALID_ID, INVALID_ID, 0x04520090, 0x045100b8,
			0x045400ba, 0x04530083, 0x045600b3, 0x045500be, 0x045800bc, 0x045700bf, 0x045a009c, 0x0459009a,
			0x045c009d, 0x045b009e, 0x045e00a2, INVALID_ID, INVALID_ID, 0x045f009f, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00a000a0, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a400a4, INVALID_ID,
			0x00a600a6, 0x00a700a7, INVALID_ID, 0x00a900a9, INVALID_ID, 0x00ab00ab, 0x00ac00ac, 0x00ad00ad,
			0x00ae00ae, INVALID_ID, INVALID_ID, 0x00b000b0, 0x00b100b1, INVALID_ID, 0x20ac0088, INVALID_ID,
			0x00b500b5, 0x00b600b6, 0x00b700b7, INVALID_ID, INVALID_ID, INVALID_ID, 0x00bb00bb, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x049000a5, INVALID_ID, INVALID_ID, 0x049100b4, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID
		};

		@Override
		int convert(int c) {
			return TABLE[((((c << 4) + c) >>> 4) ^ (c >>> 10)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1251;
		}
	}

	static final class EncoderCP1252 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1252 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			0x201c0093, INVALID_ID, INVALID_ID, 0x00c000c0, 0x201d0094, INVALID_ID, INVALID_ID, 0x00c100c1,
			0x201e0084, INVALID_ID, INVALID_ID, 0x00c200c2, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c300c3,
			0x20200086, INVALID_ID, 0x02c60088, 0x00c400c4, 0x20210087, INVALID_ID, INVALID_ID, 0x00c500c5,
			0x20220095, INVALID_ID, INVALID_ID, 0x00c600c6, 0x21220099, INVALID_ID, INVALID_ID, 0x00c700c7,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00c800c8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c900c9,
			0x20260085, INVALID_ID, INVALID_ID, 0x00ca00ca, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cb00cb,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00cc00cc, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cd00cd,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00ce00ce, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cf00cf,
			INVALID_ID, INVALID_ID, 0x20ac0080, 0x00d000d0, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d100d1,
			INVALID_ID, 0x0153009c, INVALID_ID, 0x00d200d2, INVALID_ID, 0x0152008c, 0x01920083, 0x00d300d3,
			0x20300089, INVALID_ID, INVALID_ID, 0x00d400d4, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d500d5,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00d600d6, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d700d7,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00d800d8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d900d9,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00da00da, INVALID_ID, INVALID_ID, INVALID_ID, 0x00db00db,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00dc00dc, 0x2039008b, INVALID_ID, INVALID_ID, 0x00dd00dd,
			0x203a009b, INVALID_ID, 0x02dc0098, 0x00de00de, INVALID_ID, INVALID_ID, INVALID_ID, 0x00df00df,
			INVALID_ID, 0x0161009a, 0x00a000a0, 0x00e000e0, INVALID_ID, 0x0160008a, 0x00a100a1, 0x00e100e1,
			INVALID_ID, INVALID_ID, 0x00a200a2, 0x00e200e2, INVALID_ID, INVALID_ID, 0x00a300a3, 0x00e300e3,
			INVALID_ID, INVALID_ID, 0x00a400a4, 0x00e400e4, INVALID_ID, INVALID_ID, 0x00a500a5, 0x00e500e5,
			INVALID_ID, INVALID_ID, 0x00a600a6, 0x00e600e6, INVALID_ID, INVALID_ID, 0x00a700a7, 0x00e700e7,
			INVALID_ID, INVALID_ID, 0x00a800a8, 0x00e800e8, INVALID_ID, INVALID_ID, 0x00a900a9, 0x00e900e9,
			INVALID_ID, INVALID_ID, 0x00aa00aa, 0x00ea00ea, INVALID_ID, INVALID_ID, 0x00ab00ab, 0x00eb00eb,
			INVALID_ID, INVALID_ID, 0x00ac00ac, 0x00ec00ec, INVALID_ID, INVALID_ID, 0x00ad00ad, 0x00ed00ed,
			INVALID_ID, INVALID_ID, 0x00ae00ae, 0x00ee00ee, INVALID_ID, INVALID_ID, 0x00af00af, 0x00ef00ef,
			INVALID_ID, INVALID_ID, 0x00b000b0, 0x00f000f0, INVALID_ID, INVALID_ID, 0x00b100b1, 0x00f100f1,
			INVALID_ID, INVALID_ID, 0x00b200b2, 0x00f200f2, INVALID_ID, INVALID_ID, 0x00b300b3, 0x00f300f3,
			INVALID_ID, INVALID_ID, 0x00b400b4, 0x00f400f4, INVALID_ID, INVALID_ID, 0x00b500b5, 0x00f500f5,
			INVALID_ID, INVALID_ID, 0x00b600b6, 0x00f600f6, 0x20130096, INVALID_ID, 0x00b700b7, 0x00f700f7,
			0x20140097, INVALID_ID, 0x00b800b8, 0x00f800f8, INVALID_ID, 0x0178009f, 0x00b900b9, 0x00f900f9,
			INVALID_ID, INVALID_ID, 0x00ba00ba, 0x00fa00fa, INVALID_ID, INVALID_ID, 0x00bb00bb, 0x00fb00fb,
			0x20180091, 0x017d008e, 0x00bc00bc, 0x00fc00fc, 0x20190092, INVALID_ID, 0x00bd00bd, 0x00fd00fd,
			0x201a0082, INVALID_ID, 0x00be00be, 0x00fe00fe, INVALID_ID, 0x017e009e, 0x00bf00bf, 0x00ff00ff
		};

		@Override
		int convert(int c) {
			return TABLE[((((c << 11) + c) >>> 9) ^ (c >>> 6)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1252;
		}
	}

	static final class EncoderCP1253 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1253 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			INVALID_ID, INVALID_ID, 0x03ba00ea, INVALID_ID, INVALID_ID, INVALID_ID, 0x03b900e9, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x03bc00ec, INVALID_ID, 0x20130096, INVALID_ID, 0x03bb00eb, INVALID_ID,
			0x20140097, INVALID_ID, 0x03be00ee, INVALID_ID, 0x201500af, INVALID_ID, 0x03bd00ed, INVALID_ID,
			INVALID_ID, 0x03c000f0, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x03bf00ef, INVALID_ID,
			0x20180091, 0x03c200f2, INVALID_ID, INVALID_ID, 0x20190092, 0x03c100f1, INVALID_ID, INVALID_ID,
			0x201a0082, 0x03c400f4, INVALID_ID, 0x038400b4, INVALID_ID, 0x03c300f3, INVALID_ID, INVALID_ID,
			0x201c0093, 0x03c600f6, INVALID_ID, 0x038600a2, 0x201d0094, 0x03c500f5, INVALID_ID, 0x038500a1,
			0x201e0084, 0x03c800f8, INVALID_ID, 0x038800b8, INVALID_ID, 0x03c700f7, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x03ca00fa, INVALID_ID, 0x038a00ba, INVALID_ID, 0x03c900f9, INVALID_ID, 0x038900b9,
			INVALID_ID, 0x03cc00fc, INVALID_ID, 0x038c00bc, INVALID_ID, 0x03cb00fb, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x03ce00fe, INVALID_ID, 0x038e00be, INVALID_ID, 0x03cd00fd, INVALID_ID, 0x01920083,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x039000c0, INVALID_ID, INVALID_ID, INVALID_ID, 0x038f00bf,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x039200c2, INVALID_ID, INVALID_ID, INVALID_ID, 0x039100c1,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x039400c4, INVALID_ID, INVALID_ID, INVALID_ID, 0x039300c3,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x039600c6, INVALID_ID, INVALID_ID, INVALID_ID, 0x039500c5,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x039800c8, INVALID_ID, INVALID_ID, INVALID_ID, 0x039700c7,
			INVALID_ID, 0x20300089, INVALID_ID, 0x039a00ca, 0x00a000a0, INVALID_ID, INVALID_ID, 0x039900c9,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x039c00cc, INVALID_ID, INVALID_ID, INVALID_ID, 0x039b00cb,
			0x00a300a3, INVALID_ID, INVALID_ID, 0x039e00ce, 0x00a400a4, INVALID_ID, INVALID_ID, 0x039d00cd,
			0x00a500a5, INVALID_ID, 0x03a000d0, INVALID_ID, 0x00a600a6, INVALID_ID, INVALID_ID, 0x039f00cf,
			0x00a700a7, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a800a8, 0x2039008b, 0x03a100d1, INVALID_ID,
			0x00a900a9, 0x203a009b, 0x03a400d4, INVALID_ID, INVALID_ID, INVALID_ID, 0x03a300d3, INVALID_ID,
			0x00ab00ab, INVALID_ID, 0x03a600d6, INVALID_ID, 0x00ac00ac, INVALID_ID, 0x03a500d5, INVALID_ID,
			0x00ad00ad, INVALID_ID, 0x03a800d8, INVALID_ID, 0x00ae00ae, INVALID_ID, 0x03a700d7, INVALID_ID,
			INVALID_ID, 0x20200086, 0x03aa00da, INVALID_ID, 0x00b000b0, 0x20210087, 0x03a900d9, INVALID_ID,
			0x00b100b1, 0x20220095, 0x03ac00dc, INVALID_ID, 0x00b200b2, INVALID_ID, 0x03ab00db, INVALID_ID,
			0x00b300b3, INVALID_ID, 0x03ae00de, 0x21220099, INVALID_ID, INVALID_ID, 0x03ad00dd, INVALID_ID,
			0x00b500b5, 0x20260085, 0x03b000e0, INVALID_ID, 0x00b600b6, INVALID_ID, 0x03af00df, INVALID_ID,
			0x00b700b7, INVALID_ID, 0x03b200e2, INVALID_ID, INVALID_ID, INVALID_ID, 0x03b100e1, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x03b400e4, INVALID_ID, INVALID_ID, INVALID_ID, 0x03b300e3, INVALID_ID,
			0x00bb00bb, INVALID_ID, 0x03b600e6, INVALID_ID, 0x20ac0080, INVALID_ID, 0x03b500e5, INVALID_ID,
			0x00bd00bd, INVALID_ID, 0x03b800e8, INVALID_ID, INVALID_ID, INVALID_ID, 0x03b700e7, INVALID_ID
		};

		@Override
		int convert(int c) {
			return TABLE[((((c << 7) + c) >>> 5) ^ (c >>> 7)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1253;
		}
	}

	static final class EncoderCP1254 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1254 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			INVALID_ID, 0x00df00df, 0x00be00be, INVALID_ID, 0x20200086, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00f800f8, 0x00d700d7, 0x00b600b6, 0x2039008b, 0x20180091, INVALID_ID, 0x0153009c, INVALID_ID,
			INVALID_ID, 0x00cf00cf, 0x00ae00ae, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00e800e8, 0x00c700c7, 0x00a600a6, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00e000e0, 0x00bf00bf, INVALID_ID, 0x20210087, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f900f9,
			0x00d800d8, 0x00b700b7, 0x203a009b, 0x20190092, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f100f1,
			INVALID_ID, 0x00af00af, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00e900e9,
			0x00c800c8, 0x00a700a7, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00e100e1,
			0x00c000c0, INVALID_ID, 0x20220095, 0x21220099, INVALID_ID, INVALID_ID, 0x00fa00fa, 0x00d900d9,
			0x00b800b8, INVALID_ID, 0x201a0082, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f200f2, 0x00d100d1,
			0x00b000b0, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00ea00ea, 0x00c900c9,
			0x00a800a8, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00e200e2, 0x00c100c1,
			0x00a000a0, INVALID_ID, INVALID_ID, 0x015e00de, INVALID_ID, 0x00fb00fb, 0x00da00da, 0x00b900b9,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f300f3, 0x00d200d2, 0x00b100b1,
			INVALID_ID, 0x20130096, INVALID_ID, INVALID_ID, INVALID_ID, 0x00eb00eb, 0x00ca00ca, 0x00a900a9,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00e300e3, 0x00c200c2, 0x00a100a1,
			INVALID_ID, INVALID_ID, 0x015f00fe, INVALID_ID, 0x00fc00fc, 0x00db00db, 0x00ba00ba, INVALID_ID,
			0x201c0093, 0x0178009f, INVALID_ID, INVALID_ID, 0x00f400f4, 0x00d300d3, 0x00b200b2, INVALID_ID,
			0x20140097, INVALID_ID, INVALID_ID, INVALID_ID, 0x00ec00ec, 0x00cb00cb, 0x00aa00aa, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00e400e4, 0x00c300c3, 0x00a200a2, INVALID_ID,
			INVALID_ID, 0x0160008a, INVALID_ID, 0x011e00d0, 0x00dc00dc, 0x00bb00bb, 0x02dc0098, 0x201d0094,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00f500f5, 0x00d400d4, 0x00b300b3, INVALID_ID, 0x01920083,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00ed00ed, 0x00cc00cc, 0x00ab00ab, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00e500e5, 0x00c400c4, 0x00a300a3, 0x20260085, INVALID_ID,
			0x0161009a, INVALID_ID, 0x011f00f0, INVALID_ID, 0x00bc00bc, INVALID_ID, 0x201e0084, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00f600f6, 0x00d500d5, 0x00b400b4, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x013000dd, 0x00ee00ee, 0x00cd00cd, 0x00ac00ac, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00e600e6, 0x00c500c5, 0x00a400a4, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x00ff00ff, INVALID_ID, 0x00bd00bd, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x00f700f7, 0x00d600d6, 0x00b500b5, INVALID_ID, INVALID_ID, INVALID_ID, 0x0152008c,
			0x013100fd, 0x00ef00ef, 0x00ce00ce, 0x00ad00ad, 0x20300089, INVALID_ID, INVALID_ID, INVALID_ID,
			0x20ac0080, 0x00e700e7, 0x00c600c6, 0x00a500a5, 0x02c60088, INVALID_ID, INVALID_ID, INVALID_ID
		};

		@Override
		int convert(int c) {
			return TABLE[(((((c << 13) + c) >>> 8) ^ (c >>> 11)) - c) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1254;
		}
	}

	static final class EncoderCP1255 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1255 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			0x20200086, INVALID_ID, 0x201e0084, INVALID_ID, 0x201c0093, INVALID_ID, 0x201a0082, INVALID_ID,
			0x20180091, INVALID_ID, INVALID_ID, INVALID_ID, 0x20140097, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x05f400d8, 0x200e00fd, 0x05f200d6, INVALID_ID, 0x05f000d4, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x05ea00fa, INVALID_ID, 0x05e800f8, INVALID_ID, 0x05e600f6,
			INVALID_ID, 0x05e400f4, INVALID_ID, 0x05e200f2, INVALID_ID, 0x05e000f0, 0x02dc0098, 0x05de00ee,
			INVALID_ID, 0x05dc00ec, INVALID_ID, 0x05da00ea, INVALID_ID, 0x05d800e8, INVALID_ID, 0x05d600e6,
			INVALID_ID, 0x05d400e4, INVALID_ID, 0x05d200e2, INVALID_ID, 0x05d000e0, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x02c60088, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00be00be, 0x05c200d2, 0x00bc00bc, 0x05c000d0, INVALID_ID, 0x05be00ce,
			0x00b800b8, 0x05bc00cc, 0x00b600b6, INVALID_ID, 0x00b400b4, 0x05b800c8, 0x00b200b2, 0x05b600c6,
			0x00b000b0, 0x05b400c4, 0x00ae00ae, 0x05b200c2, 0x00ac00ac, 0x05b000c0, INVALID_ID, INVALID_ID,
			0x00a800a8, INVALID_ID, 0x00a600a6, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a200a2, INVALID_ID,
			0x00a000a0, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x2039008b,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x01920083,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20ac0080, INVALID_ID, 0x20aa00a4, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20210087,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x201d0094, INVALID_ID, INVALID_ID, INVALID_ID, 0x20190092,
			INVALID_ID, 0x00f700ba, INVALID_ID, INVALID_ID, INVALID_ID, 0x20130096, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x200f00fe, 0x05f300d7, INVALID_ID, 0x05f100d5, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x05e900f9, INVALID_ID, 0x05e700f7, INVALID_ID,
			0x05e500f5, INVALID_ID, 0x05e300f3, INVALID_ID, 0x05e100f1, INVALID_ID, 0x05df00ef, INVALID_ID,
			0x05dd00ed, 0x00d700aa, 0x05db00eb, INVALID_ID, 0x05d900e9, INVALID_ID, 0x05d700e7, INVALID_ID,
			0x05d500e5, INVALID_ID, 0x05d300e3, INVALID_ID, 0x05d100e1, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x00bf00bf, 0x05c300d3, 0x00bd00bd, 0x05c100d1, 0x00bb00bb, 0x05bf00cf, 0x00b900b9,
			0x05bd00cd, 0x00b700b7, 0x05bb00cb, 0x00b500b5, 0x05b900c9, 0x00b300b3, 0x05b700c7, 0x00b100b1,
			0x05b500c5, 0x00af00af, 0x05b300c3, 0x00ad00ad, 0x05b100c1, 0x00ab00ab, INVALID_ID, 0x00a900a9,
			INVALID_ID, 0x00a700a7, INVALID_ID, 0x00a500a5, INVALID_ID, 0x00a300a3, INVALID_ID, 0x00a100a1,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x203a009b, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x20300089, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x20260085, INVALID_ID, INVALID_ID, INVALID_ID, 0x20220095, 0x21220099
		};

		@Override
		int convert(int i) {
			return TABLE[(((i << 7) ^ (i >>> 8)) - i) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1255;
		}
	}

	static final class EncoderCP1256 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1256 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d700d7, INVALID_ID, 0x21220099, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x0698008e, INVALID_ID,
			INVALID_ID, 0x00e000e0, 0x06af0090, 0x00e200e2, INVALID_ID, 0x06a90098, INVALID_ID, INVALID_ID,
			0x00e800e8, 0x00e700e7, 0x00e900e9, INVALID_ID, 0x00eb00eb, 0x00ea00ea, INVALID_ID, INVALID_ID,
			0x00ee00ee, 0x06ba009f, INVALID_ID, 0x00ef00ef, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x00f400f4, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f700f7, INVALID_ID, 0x00f900f9,
			0x00fb00fb, INVALID_ID, INVALID_ID, 0x00fc00fc, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x06c100c0, INVALID_ID, INVALID_ID, INVALID_ID, 0x06be00aa, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x20180091, 0x20190092, 0x201a0082, 0x06d200ff, INVALID_ID, 0x201c0093, 0x201d0094,
			0x201e0084, INVALID_ID, 0x20200086, INVALID_ID, 0x20210087, 0x20220095, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x20260085, INVALID_ID, INVALID_ID, 0x060c00a1, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x02c60088, INVALID_ID, INVALID_ID, 0x20300089, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x061b00ba,
			INVALID_ID, 0x2039008b, 0x203a009b, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x062900c9, 0x062a00ca, INVALID_ID, 0x062b00cb, 0x062600c6, INVALID_ID, 0x062700c7, 0x062800c8,
			0x062200c2, 0x062300c3, 0x062400c4, 0x062500c5, 0x061f00bf, INVALID_ID, 0x062100c1, INVALID_ID,
			0x063600d6, 0x063700d8, 0x063800d9, INVALID_ID, 0x063300d3, 0x063400d4, INVALID_ID, 0x063500d5,
			INVALID_ID, 0x063000d0, 0x063100d1, 0x063200d2, 0x062c00cc, 0x062d00cd, 0x062e00ce, 0x062f00cf,
			0x064300df, 0x064400e1, 0x064500e3, 0x064600e4, 0x064000dc, 0x064100dd, 0x064200de, INVALID_ID,
			0x0152008c, 0x0153009c, INVALID_ID, INVALID_ID, 0x063900da, 0x063a00db, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x065100f8, 0x065200fa, INVALID_ID, 0x064d00f2, 0x064e00f3, 0x064f00f5, 0x065000f6,
			0x064a00ed, 0x064b00f0, INVALID_ID, 0x064c00f1, INVALID_ID, 0x064700e5, 0x064800e6, 0x064900ec,
			INVALID_ID, INVALID_ID, 0x200c009d, 0x200d009e, INVALID_ID, 0x200e00fd, 0x200f00fe, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x20130096, 0x20140097, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00a000a0, INVALID_ID, 0x00a200a2, 0x00a400a4, 0x00a300a3,
			0x00a600a6, 0x00a500a5, INVALID_ID, 0x00a700a7, 0x00a900a9, 0x00a800a8, 0x00ab00ab, INVALID_ID,
			0x00ac00ac, 0x0679008a, 0x00ae00ae, 0x00ad00ad, 0x00b000b0, 0x00af00af, 0x00b100b1, INVALID_ID,
			0x00b300b3, 0x00b200b2, 0x00b500b5, 0x00b400b4, 0x00b600b6, INVALID_ID, 0x00b800b8, 0x00b700b7,
			0x0686008d, 0x00b900b9, 0x00bb00bb, INVALID_ID, 0x00bd00bd, 0x00bc00bc, INVALID_ID, 0x00be00be,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x01920083, INVALID_ID, INVALID_ID, INVALID_ID, 0x067e0081,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20ac0080, INVALID_ID, INVALID_ID, 0x0691009a,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x0688008f, INVALID_ID, INVALID_ID

		};

		@Override
		int convert(int c) {
			return TABLE[(((c * 2489) >>> 11) ^ (c >>> 7)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1256;
		}
	}

	static final class EncoderCP1257 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1257 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			0x010000c2, INVALID_ID, 0x011600cb, 0x00f500f5, 0x20210087, 0x013700ed, INVALID_ID, 0x00c900c9,
			INVALID_ID, 0x00b300b3, INVALID_ID, 0x014d00f4, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00b000b0, 0x00bb00bb, 0x20130096, 0x014500d2, 0x00dc00dc, 0x201e0084, INVALID_ID, 0x017900ca,
			0x00a8008d, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x016000d0, 0x016b00fb, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d700d7, INVALID_ID, INVALID_ID,
			0x00b8008f, INVALID_ID, INVALID_ID, 0x00ad00ad, 0x20190092, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x015b00fa, 0x010600c3, INVALID_ID, 0x013c00ef, INVALID_ID, INVALID_ID, 0x011900e6,
			INVALID_ID, INVALID_ID, 0x017e00fe, INVALID_ID, 0x00c400c4, 0x00df00df, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00d600d6, INVALID_ID, INVALID_ID, 0x00f700f7, 0x012a00ce, INVALID_ID,
			INVALID_ID, 0x017300f8, 0x00ae00ae, 0x20140097, INVALID_ID, INVALID_ID, INVALID_ID, 0x00b100b1,
			INVALID_ID, 0x017b00dd, 0x00a600a6, 0x201c0093, INVALID_ID, INVALID_ID, 0x015a00da, 0x00b900b9,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00e400e4, INVALID_ID, 0x012200cc, 0x010100e2,
			0x00a000a0, 0x00ab00ab, 0x00b600b6, INVALID_ID, 0x010c00c8, 0x011700eb, INVALID_ID, 0x00e900e9,
			INVALID_ID, 0x203a009b, INVALID_ID, INVALID_ID, INVALID_ID, 0x012f00e1, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00c600af, INVALID_ID, 0x00fc00fc, INVALID_ID, INVALID_ID, 0x02d900ff,
			INVALID_ID, 0x00a300a3, 0x00be00be, INVALID_ID, 0x010400c0, INVALID_ID, 0x014200f9, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x20ac0080, 0x00ac00ac, 0x00b700b7, 0x016a00db, INVALID_ID,
			0x00d800a8, 0x201a0082, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x011200c7, INVALID_ID,
			INVALID_ID, 0x013b00cf, 0x00e600bf, 0x00c500c5, INVALID_ID, 0x010700e3, INVALID_ID, 0x20300089,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x017d00de, 0x00a400a4, INVALID_ID, INVALID_ID, 0x014100d9,
			INVALID_ID, 0x20220095, 0x00f600f6, INVALID_ID, 0x014c00d4, 0x015700ba, 0x21220099, 0x00a900a9,
			INVALID_ID, 0x00d300d3, INVALID_ID, INVALID_ID, 0x00b400b4, INVALID_ID, 0x017200d8, INVALID_ID,
			0x201d0094, 0x02db009e, INVALID_ID, INVALID_ID, 0x00bc00bc, INVALID_ID, 0x017a00ea, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x014400f1, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x015600aa, 0x00b500b5, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x011800c6, 0x00f300f3, 0x012e00c1, 0x010d00e8, 0x2039008b, INVALID_ID, INVALID_ID, 0x20180091,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x010500e0, INVALID_ID, 0x02c7008e, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x014300d1, INVALID_ID, 0x00bd00bd, INVALID_ID, 0x20260085, 0x00a200a2, INVALID_ID,
			INVALID_ID, 0x012b00ee, 0x013600cd, 0x00d500d5, INVALID_ID, INVALID_ID, INVALID_ID, 0x20200086,
			0x00f800b8, 0x011300e7, INVALID_ID, INVALID_ID, INVALID_ID, 0x00af009d, 0x00b200b2, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x014600f2, 0x00e500e5, 0x017c00fd, 0x00a700a7, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x012300ec, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x016100f0
		};

		@Override
		int convert(int c) {
			return TABLE[(((c * 3080223) >>> 15) ^ c) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1257;
		}
	}

	static final class EncoderCP1258 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP1258 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			INVALID_ID, 0x20300089, 0x00bd00bd, 0x030000cc, 0x00fa00fa, INVALID_ID, 0x00b700b7, INVALID_ID,
			0x00f400f4, INVALID_ID, 0x00b100b1, INVALID_ID, 0x00ee00ee, 0x201e0084, 0x00ab00ab, INVALID_ID,
			0x00e800e8, 0x20180091, 0x00a500a5, INVALID_ID, 0x00e200e2, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00dc00dc, INVALID_ID, 0x02dc0098, INVALID_ID, 0x00d600d6, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00ca00ca, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00c400c4, INVALID_ID, INVALID_ID, INVALID_ID, 0x00be00be, 0x030100ec, 0x00fb00fb, 0x20ab00fe,
			0x00b800b8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00b200b2, INVALID_ID, 0x00ef00ef, INVALID_ID,
			0x00ac00ac, INVALID_ID, 0x00e900e9, 0x20190092, 0x00a600a6, INVALID_ID, INVALID_ID, 0x20130096,
			0x00a000a0, 0x01a000d5, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d700d7, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00d100d1, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cb00cb, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00c500c5, INVALID_ID, INVALID_ID, 0x010200c3, 0x00bf00bf, INVALID_ID,
			0x00fc00fc, 0x20ac0080, 0x00b900b9, INVALID_ID, 0x00f600f6, 0x20260085, 0x00b300b3, INVALID_ID,
			INVALID_ID, 0x20200086, 0x00ad00ad, INVALID_ID, 0x00ea00ea, 0x201a0082, 0x00a700a7, INVALID_ID,
			0x00e400e4, 0x20140097, 0x00a100a1, 0x01a100f5, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00d800d8, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x0152008c, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x2039008b, 0x00c600c6, 0x030900d2, 0x02c60088, 0x010300e3,
			0x00c000c0, 0x030300de, INVALID_ID, INVALID_ID, 0x00ba00ba, INVALID_ID, 0x00f700f7, INVALID_ID,
			0x00b400b4, INVALID_ID, 0x00f100f1, 0x20210087, 0x00ae00ae, INVALID_ID, 0x00eb00eb, INVALID_ID,
			0x00a800a8, INVALID_ID, 0x00e500e5, INVALID_ID, 0x00a200a2, INVALID_ID, 0x00df00df, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00d900d9, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d300d3, 0x0153009c,
			INVALID_ID, 0x011000d0, 0x00cd00cd, INVALID_ID, INVALID_ID, 0x203a009b, 0x00c700c7, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00c100c1, INVALID_ID, INVALID_ID, INVALID_ID, 0x00bb00bb, INVALID_ID,
			0x00f800f8, 0x0178009f, 0x00b500b5, INVALID_ID, 0x21220099, 0x20220095, 0x00af00af, 0x01af00dd,
			INVALID_ID, 0x201c0093, 0x00a900a9, INVALID_ID, 0x00e600e6, INVALID_ID, 0x00a300a3, INVALID_ID,
			0x00e000e0, 0x032300f2, INVALID_ID, INVALID_ID, 0x00da00da, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00d400d4, INVALID_ID, INVALID_ID, 0x011100f0, 0x00ce00ce, INVALID_ID, INVALID_ID, INVALID_ID,
			0x00c800c8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c200c2, INVALID_ID, 0x00ff00ff, INVALID_ID,
			0x00bc00bc, INVALID_ID, 0x00f900f9, INVALID_ID, 0x00b600b6, INVALID_ID, 0x00f300f3, INVALID_ID,
			0x00b000b0, 0x01b000fd, 0x00ed00ed, 0x201d0094, 0x00aa00aa, INVALID_ID, 0x00e700e7, INVALID_ID,
			0x00a400a4, INVALID_ID, 0x00e100e1, INVALID_ID, INVALID_ID, INVALID_ID, 0x00db00db, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x01920083, 0x00cf00cf, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00c900c9, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID
		};

		@Override
		int convert(int i) {
			return TABLE[(((i * 10753) >>> 8) ^ (i >>> 13)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1258;
		}
	}

	static final class EncoderCP860 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP860 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			0x00d4008c, 0x224800f7, 0x00bf00a8, INVALID_ID, 0x221e00ec, 0x00aa00a6, INVALID_ID, INVALID_ID,
			0x255900d3, 0x00ea0088, INVALID_ID, INVALID_ID, 0x00d50099, INVALID_ID, 0x00c00091, 0x03a600e8,
			0x258400dc, 0x00ab00ae, INVALID_ID, INVALID_ID, INVALID_ID, 0x255a00c8, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00c10086, INVALID_ID, INVALID_ID, 0x00ac00aa, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x255b00be, 0x00ec008d, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c2008f, INVALID_ID,
			0x251c00c3, INVALID_ID, 0x039300e2, INVALID_ID, INVALID_ID, 0x255c00bd, 0x00ed00a1, 0x226100f0,
			INVALID_ID, 0x232000f4, 0x00c3008e, 0x03a900ea, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x255d00bc, INVALID_ID, INVALID_ID, 0x00d9009d, 0x232100f5, INVALID_ID, INVALID_ID,
			0x258800db, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x255e00c6, INVALID_ID, INVALID_ID,
			0x00da0096, 0x03c000e3, 0x253400c1, INVALID_ID, INVALID_ID, 0x00b000f8, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x255f00c7, INVALID_ID, 0x226400f3, 0x20a7009e, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x00b100f1, INVALID_ID, INVALID_ID, INVALID_ID, 0x256000cc, 0x00f100a4, 0x226500f2,
			0x00dc009a, INVALID_ID, 0x25a000fe, 0x00c70080, INVALID_ID, 0x00b200fd, 0x039800e9, 0x250c00da,
			INVALID_ID, 0x256100b5, 0x00f20095, INVALID_ID, INVALID_ID, 0x03c300e5, INVALID_ID, 0x00c80092,
			0x258c00dd, 0x207f00fc, INVALID_ID, INVALID_ID, INVALID_ID, 0x256200b6, 0x00f300a2, INVALID_ID,
			INVALID_ID, 0x03c400e7, INVALID_ID, 0x00c90090, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x256300b9, 0x00f40093, INVALID_ID, INVALID_ID, 0x00df00e1, INVALID_ID, 0x00ca0089,
			0x252400b4, 0x00b500e6, INVALID_ID, 0x222900ef, 0x00a000ff, 0x256400d1, 0x00f50094, INVALID_ID,
			INVALID_ID, 0x00e00085, 0x03c600ed, INVALID_ID, 0x03b100e0, INVALID_ID, INVALID_ID, 0x251000bf,
			0x00a100ad, 0x256500d2, INVALID_ID, INVALID_ID, 0x255000cd, 0x00e100a0, INVALID_ID, 0x00cc0098,
			INVALID_ID, 0x259000de, 0x00b700fa, INVALID_ID, 0x00a2009b, 0x256600cb, 0x00f700f6, INVALID_ID,
			0x255100ba, 0x00e20083, 0x253c00c5, 0x00cd008b, INVALID_ID, 0x259100b0, INVALID_ID, INVALID_ID,
			0x00a3009c, INVALID_ID, 0x256700cf, INVALID_ID, 0x255200d5, 0x00e30084, INVALID_ID, INVALID_ID,
			0x03b400eb, 0x259200b1, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x256800d0, 0x00f90097,
			0x255300d6, INVALID_ID, INVALID_ID, INVALID_ID, 0x03b500ee, 0x259300b2, 0x00ba00a7, 0x251400c0,
			0x221900f9, INVALID_ID, 0x256900ca, 0x00fa00a3, 0x255400c9, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x00bb00af, INVALID_ID, 0x221a00fb, INVALID_ID, 0x256a00d8, 0x250000c4,
			0x255500b8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d100a5, INVALID_ID, 0x00bc00ac, 0x258000df,
			INVALID_ID, INVALID_ID, 0x256b00d7, 0x00fc0081, 0x255600b7, 0x00e70087, INVALID_ID, INVALID_ID,
			0x00d200a9, 0x252c00c2, 0x00bd00ab, 0x03a300e4, INVALID_ID, INVALID_ID, 0x256c00ce, 0x250200b3,
			0x255700bb, 0x00e8008a, INVALID_ID, INVALID_ID, 0x00d3009f, INVALID_ID, INVALID_ID, 0x251800d9,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x255800d4, 0x00e90082, INVALID_ID, INVALID_ID
		};

		@Override
		int convert(int i) {
			int m = i * 6340922;
			return TABLE[((m >>> 31) ^ (m >>> 12)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP860;
		}
	}

	static final class EncoderCP865 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP865 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			0x258000df, 0x226500f2, INVALID_ID, 0x00fb0096, INVALID_ID, 0x00f60094, INVALID_ID, 0x00f100a4,
			0x256c00ce, 0x00ec008d, 0x256700cf, 0x00e70087, 0x256200b6, 0x00e20083, 0x255d00bc, INVALID_ID,
			0x255800d4, 0x00d8009d, 0x255300d6, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c90090,
			0x03b500ee, 0x00c4008e, 0x232100f5, 0x00bf00a8, INVALID_ID, 0x00ba00a7, 0x03c400e7, 0x00b500e6,
			INVALID_ID, 0x00b000f8, 0x03a600e8, 0x00ab00ae, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a100ad,
			0x251c00c3, INVALID_ID, INVALID_ID, INVALID_ID, 0x259200b1, INVALID_ID, 0x0192009f, INVALID_ID,
			0x258800db, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f90097,
			INVALID_ID, 0x00f40093, INVALID_ID, 0x00ef008b, 0x256a00d8, 0x00ea0088, 0x256500d2, 0x00e50086,
			0x256000cc, 0x00e00085, 0x255b00be, INVALID_ID, 0x255600b7, 0x00d60099, 0x255100ba, 0x00d100a5,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00c70080, INVALID_ID, INVALID_ID, INVALID_ID, 0x00bd00ab,
			0x03a900ea, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x252400b4, 0x00a400af, INVALID_ID, INVALID_ID, 0x231000a9, INVALID_ID, INVALID_ID, 0x251000bf,
			0x259000de, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x221a00fb, INVALID_ID,
			INVALID_ID, 0x00fc0081, INVALID_ID, 0x00f700f6, 0x222900ef, 0x00f20095, INVALID_ID, 0x00ed00a1,
			0x256800d0, 0x00e8008a, 0x256300b9, INVALID_ID, 0x255e00c6, INVALID_ID, 0x255900d3, INVALID_ID,
			0x255400c9, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c5008f,
			0x03b100e0, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x03c000e3, 0x00b100f1,
			0x252c00c2, 0x00ac00aa, INVALID_ID, 0x224800f7, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x251800d9, INVALID_ID, 0x259300b2, INVALID_ID, 0x039300e2, INVALID_ID, 0x039800e9, INVALID_ID,
			0x258400dc, 0x226100f0, INVALID_ID, 0x00ff0098, INVALID_ID, 0x00fa00a3, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x207f00fc, 0x256b00d7, 0x00eb0089, 0x256600cb, 0x00e60091, 0x256100b5, 0x00e100a0,
			0x255c00bd, 0x00dc009a, 0x255700bb, INVALID_ID, 0x255200d5, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x20a7009e, INVALID_ID, 0x03c300e5, INVALID_ID, INVALID_ID, INVALID_ID,
			0x253400c1, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00aa00a6, 0x03b400eb, INVALID_ID,
			0x25a000fe, 0x00a000ff, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x259100b0, 0x250c00da,
			0x258c00dd, INVALID_ID, INVALID_ID, 0x250200b3, 0x221900f9, INVALID_ID, 0x221e00ec, INVALID_ID,
			INVALID_ID, 0x00f8009b, INVALID_ID, 0x00f300a2, INVALID_ID, 0x00ee008c, 0x256900ca, 0x00e90082,
			0x256400d1, 0x00e40084, 0x255f00c7, 0x00df00e1, 0x255a00c8, INVALID_ID, 0x255500b8, INVALID_ID,
			0x255000cd, INVALID_ID, 0x03c600ed, 0x226400f3, INVALID_ID, 0x00c60092, INVALID_ID, INVALID_ID,
			0x253c00c5, 0x00bc00ac, INVALID_ID, 0x00b700fa, INVALID_ID, 0x00b200fd, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, 0x00a3009c, 0x03a300e4, INVALID_ID, INVALID_ID, 0x251400c0,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x232000f4, INVALID_ID, INVALID_ID, 0x250000c4
		};

		@Override
		int convert(int i) {
			int m = i * 459366;
			return TABLE[(((m >>> 26) ^ m) - (i >>> 13)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP865;
		}
	}

	static final class EncoderCP874 extends SingleByteEncoder implements Encoder {

		// collision-free hash table for CP874 char-to-byte conversion.
		// unless entry == INVALID_ID, highest 16 bits are used 
		// to verify key match, lowest byte is mapped byte.
		// only maps entries for keys >= 128 (non-ASCII range).
		private static final int[] TABLE = {
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x20130096, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20140097, INVALID_ID,
			INVALID_ID, INVALID_ID, 0x20190092, 0x20180091, INVALID_ID, INVALID_ID, 0x201d0094, 0x201c0093,
			INVALID_ID, INVALID_ID, 0x20260085, INVALID_ID, INVALID_ID, INVALID_ID, 0x20220095, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x0e4900e9, 0x0e4800e8, 0x0e4b00eb, 0x0e4a00ea, 0x0e4d00ed, 0x0e4c00ec, 0x0e4f00ef, 0x0e4e00ee,
			0x0e4000e0, 0x0e4100e1, 0x0e4200e2, 0x0e4300e3, 0x0e4400e4, 0x0e4500e5, 0x0e4600e6, 0x0e4700e7,
			0x0e5b00fb, 0x0e5a00fa, 0x0e5900f9, 0x0e5800f8, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			0x0e5200f2, 0x0e5300f3, 0x0e5000f0, 0x0e5100f1, 0x0e5600f6, 0x0e5700f7, 0x0e5400f4, 0x0e5500f5,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a000a0, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x20ac0080, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
			INVALID_ID, 0x0e0100a1, 0x0e0200a2, 0x0e0300a3, 0x0e0400a4, 0x0e0500a5, 0x0e0600a6, 0x0e0700a7,
			0x0e0900a9, 0x0e0800a8, 0x0e0b00ab, 0x0e0a00aa, 0x0e0d00ad, 0x0e0c00ac, 0x0e0f00af, 0x0e0e00ae,
			0x0e1200b2, 0x0e1300b3, 0x0e1000b0, 0x0e1100b1, 0x0e1600b6, 0x0e1700b7, 0x0e1400b4, 0x0e1500b5,
			0x0e1b00bb, 0x0e1a00ba, 0x0e1900b9, 0x0e1800b8, 0x0e1f00bf, 0x0e1e00be, 0x0e1d00bd, 0x0e1c00bc,
			0x0e2400c4, 0x0e2500c5, 0x0e2600c6, 0x0e2700c7, 0x0e2000c0, 0x0e2100c1, 0x0e2200c2, 0x0e2300c3,
			0x0e2d00cd, 0x0e2c00cc, 0x0e2f00cf, 0x0e2e00ce, 0x0e2900c9, 0x0e2800c8, 0x0e2b00cb, 0x0e2a00ca,
			0x0e3600d6, 0x0e3700d7, 0x0e3400d4, 0x0e3500d5, 0x0e3200d2, 0x0e3300d3, 0x0e3000d0, 0x0e3100d1,
			0x0e3f00df, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x0e3a00da, 0x0e3900d9, 0x0e3800d8
		};

		@Override
		int convert(int i) {
			return TABLE[(((i >>> 3) ^ i)) & 0xff];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP874;
		}
	}

	// decoders
	static final class DecoderASCII extends SingleByteDecoder {

		@Override
		char convert(byte b) {
			return b >= 0 ? (char) b : NO_DEF;
		}

		@Override
		public Encoding encoding() {
			return Encoding.ASCII;
		}
	}

	static final class DecoderISO_8859_1 extends SingleByteDecoder {

		@Override
		char convert(byte b) {
			return ((char) (b & 0xff));
		}

		@Override
		public Encoding encoding() {
			return Encoding.ISO_8859_1;
		}
	}

	static final class DecoderCP1250 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1250.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, NO_DEF, 0x201E, 0x2026, 0x2020, 0x2021,
			NO_DEF, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			NO_DEF, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
			0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
			0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
			0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
			0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
			0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
			0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
			0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
			0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
			0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
			0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1250;
		}
	}

	static final class DecoderCP1251 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1251.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
			0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
			0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			NO_DEF, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
			0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
			0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
			0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
			0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
			0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
			0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
			0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
			0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
			0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
			0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
			0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
			0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1251;
		}
	}

	static final class DecoderCP1252 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, NO_DEF, 0x017D, NO_DEF,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, NO_DEF, 0x017E, 0x0178,
			0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
			0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
			0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
			0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
			0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
			0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
			0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
			0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
			0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1252;
		}
	}

	static final class DecoderCP1253 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1253.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			NO_DEF, 0x2030, NO_DEF, 0x2039, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			NO_DEF, 0x2122, NO_DEF, 0x203A, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			0x00A0, 0x0385, 0x0386, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, NO_DEF, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x2015,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x00B5, 0x00B6, 0x00B7,
			0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
			0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
			0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
			0x03A0, 0x03A1, NO_DEF, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
			0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
			0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
			0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
			0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
			0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, NO_DEF
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1253;
		}
	}

	static final class DecoderCP1254 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1254.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, NO_DEF, NO_DEF, NO_DEF,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, NO_DEF, NO_DEF, 0x0178,
			0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
			0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
			0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
			0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
			0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
			0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
			0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
			0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
			0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1254;
		}
	}

	static final class DecoderCP1255 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1255.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			0x02C6, 0x2030, NO_DEF, 0x2039, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			0x02DC, 0x2122, NO_DEF, 0x203A, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x20AA, 0x00A5, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
			0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7,
			0x05B8, 0x05B9, NO_DEF, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF,
			0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05F0, 0x05F1, 0x05F2, 0x05F3,
			0x05F4, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
			0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
			0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
			0x05E8, 0x05E9, 0x05EA, NO_DEF, NO_DEF, 0x200E, 0x200F, NO_DEF
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1255;
		}
	}

	static final class DecoderCP1256 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1256.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			0x02C6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
			0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			0x06A9, 0x2122, 0x0691, 0x203A, 0x0153, 0x200C, 0x200D, 0x06BA,
			0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, 0x06BE, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
			0x06C1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
			0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
			0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7,
			0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0641, 0x0642, 0x0643,
			0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7,
			0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
			0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7,
			0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x06D2
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1256;
		}
	}

	static final class DecoderCP1257 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1257.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, NO_DEF, 0x201E, 0x2026, 0x2020, 0x2021,
			NO_DEF, 0x2030, NO_DEF, 0x2039, NO_DEF, 0x00A8, 0x02C7, 0x00B8,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			NO_DEF, 0x2122, NO_DEF, 0x203A, NO_DEF, 0x00AF, 0x02DB, NO_DEF,
			0x00A0, NO_DEF, 0x00A2, 0x00A3, 0x00A4, NO_DEF, 0x00A6, 0x00A7,
			0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
			0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
			0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
			0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
			0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
			0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
			0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
			0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
			0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1257;
		}
	}

	static final class DecoderCP1258 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1258.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			0x02C6, 0x2030, NO_DEF, 0x2039, 0x0152, NO_DEF, NO_DEF, NO_DEF,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			0x02DC, 0x2122, NO_DEF, 0x203A, 0x0153, NO_DEF, NO_DEF, 0x0178,
			0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
			0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
			0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
			0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
			0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x0300, 0x00CD, 0x00CE, 0x00CF,
			0x0110, 0x00D1, 0x0309, 0x00D3, 0x00D4, 0x01A0, 0x00D6, 0x00D7,
			0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x01AF, 0x0303, 0x00DF,
			0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
			0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0301, 0x00ED, 0x00EE, 0x00EF,
			0x0111, 0x00F1, 0x0323, 0x00F3, 0x00F4, 0x01A1, 0x00F6, 0x00F7,
			0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x01B0, 0x20AB, 0x00FF
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP1258;
		}
	}

	static final class DecoderCP860 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/PC/CP860.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E3, 0x00E0, 0x00C1, 0x00E7,
			0x00EA, 0x00CA, 0x00E8, 0x00CD, 0x00D4, 0x00EC, 0x00C3, 0x00C2,
			0x00C9, 0x00C0, 0x00C8, 0x00F4, 0x00F5, 0x00F2, 0x00DA, 0x00F9,
			0x00CC, 0x00D5, 0x00DC, 0x00A2, 0x00A3, 0x00D9, 0x20A7, 0x00D3,
			0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
			0x00BF, 0x00D2, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
			0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
			0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
			0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
			0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
			0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
			0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
			0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
			0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
			0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
			0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP860;
		}
	}

	static final class DecoderCP865 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/PC/CP865.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
			0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
			0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
			0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x20A7, 0x0192,
			0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
			0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00A4,
			0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
			0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
			0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
			0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
			0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
			0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
			0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
			0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
			0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
			0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP865;
		}
	}

	static final class DecoderCP874 extends SingleByteDecoder {

		// table generated from:
		// http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP874.TXT
		private static final char[] TABLE = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
			0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
			0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
			0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
			0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
			0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
			0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
			0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
			0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
			0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
			0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
			0x20AC, NO_DEF, NO_DEF, NO_DEF, NO_DEF, 0x2026, NO_DEF, NO_DEF,
			NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			NO_DEF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF, NO_DEF,
			0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
			0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
			0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
			0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
			0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
			0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
			0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
			0x0E38, 0x0E39, 0x0E3A, NO_DEF, NO_DEF, NO_DEF, NO_DEF, 0x0E3F,
			0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
			0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
			0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
			0x0E58, 0x0E59, 0x0E5A, 0x0E5B, NO_DEF, NO_DEF, NO_DEF, NO_DEF
		};

		@Override
		char convert(byte b) {
			return TABLE[b & 0xFF];
		}

		@Override
		public Encoding encoding() {
			return Encoding.CP874;
		}
	}
}
