/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bitsandpieces.util.encoding;

/**
 *
 * @author pp
 */
final class EncoderCP1252 extends SingleByteEncoder implements Encoder {
	
	// collision-free hash table for CP1252 char-to-byte conversion.
	// unless entry == INVALID_ID, highest 16 bits are used 
	// to verify key match, lowest byte is mapped byte.
	// only maps entries for keys >= 128 (non-ASCII range).
	private static final int[] TABLE = {
		0x201c0093, INVALID_ID, INVALID_ID, 0x00c000c0, 0x201d0094, INVALID_ID, INVALID_ID, 0x00c100c1,
		0x201e0084, INVALID_ID, INVALID_ID, 0x00c200c2, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c300c3,
		0x20200086, INVALID_ID, 0x02c60088, 0x00c400c4, 0x20210087, INVALID_ID, INVALID_ID, 0x00c500c5,
		0x20220095, INVALID_ID, INVALID_ID, 0x00c600c6, 0x21220099, INVALID_ID, INVALID_ID, 0x00c700c7,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00c800c8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c900c9,
		0x20260085, INVALID_ID, INVALID_ID, 0x00ca00ca, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cb00cb,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00cc00cc, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cd00cd,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00ce00ce, INVALID_ID, INVALID_ID, INVALID_ID, 0x00cf00cf,
		INVALID_ID, INVALID_ID, 0x20ac0080, 0x00d000d0, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d100d1,
		INVALID_ID, 0x0153009c, INVALID_ID, 0x00d200d2, INVALID_ID, 0x0152008c, 0x01920083, 0x00d300d3,
		0x20300089, INVALID_ID, INVALID_ID, 0x00d400d4, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d500d5,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00d600d6, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d700d7,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00d800d8, INVALID_ID, INVALID_ID, INVALID_ID, 0x00d900d9,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00da00da, INVALID_ID, INVALID_ID, INVALID_ID, 0x00db00db,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00dc00dc, 0x2039008b, INVALID_ID, INVALID_ID, 0x00dd00dd,
		0x203a009b, INVALID_ID, 0x02dc0098, 0x00de00de, INVALID_ID, INVALID_ID, INVALID_ID, 0x00df00df,
		INVALID_ID, 0x0161009a, 0x00a000a0, 0x00e000e0, INVALID_ID, 0x0160008a, 0x00a100a1, 0x00e100e1,
		INVALID_ID, INVALID_ID, 0x00a200a2, 0x00e200e2, INVALID_ID, INVALID_ID, 0x00a300a3, 0x00e300e3,
		INVALID_ID, INVALID_ID, 0x00a400a4, 0x00e400e4, INVALID_ID, INVALID_ID, 0x00a500a5, 0x00e500e5,
		INVALID_ID, INVALID_ID, 0x00a600a6, 0x00e600e6, INVALID_ID, INVALID_ID, 0x00a700a7, 0x00e700e7,
		INVALID_ID, INVALID_ID, 0x00a800a8, 0x00e800e8, INVALID_ID, INVALID_ID, 0x00a900a9, 0x00e900e9,
		INVALID_ID, INVALID_ID, 0x00aa00aa, 0x00ea00ea, INVALID_ID, INVALID_ID, 0x00ab00ab, 0x00eb00eb,
		INVALID_ID, INVALID_ID, 0x00ac00ac, 0x00ec00ec, INVALID_ID, INVALID_ID, 0x00ad00ad, 0x00ed00ed,
		INVALID_ID, INVALID_ID, 0x00ae00ae, 0x00ee00ee, INVALID_ID, INVALID_ID, 0x00af00af, 0x00ef00ef,
		INVALID_ID, INVALID_ID, 0x00b000b0, 0x00f000f0, INVALID_ID, INVALID_ID, 0x00b100b1, 0x00f100f1,
		INVALID_ID, INVALID_ID, 0x00b200b2, 0x00f200f2, INVALID_ID, INVALID_ID, 0x00b300b3, 0x00f300f3,
		INVALID_ID, INVALID_ID, 0x00b400b4, 0x00f400f4, INVALID_ID, INVALID_ID, 0x00b500b5, 0x00f500f5,
		INVALID_ID, INVALID_ID, 0x00b600b6, 0x00f600f6, 0x20130096, INVALID_ID, 0x00b700b7, 0x00f700f7,
		0x20140097, INVALID_ID, 0x00b800b8, 0x00f800f8, INVALID_ID, 0x0178009f, 0x00b900b9, 0x00f900f9,
		INVALID_ID, INVALID_ID, 0x00ba00ba, 0x00fa00fa, INVALID_ID, INVALID_ID, 0x00bb00bb, 0x00fb00fb,
		0x20180091, 0x017d008e, 0x00bc00bc, 0x00fc00fc, 0x20190092, INVALID_ID, 0x00bd00bd, 0x00fd00fd,
		0x201a0082, INVALID_ID, 0x00be00be, 0x00fe00fe, INVALID_ID, 0x017e009e, 0x00bf00bf, 0x00ff00ff
	};

	@Override
	int convert(int c) {
		return TABLE[((((c << 11) + c) >>> 9) ^ (c >>> 6)) & 0xff];
	}

	@Override
	public Encoding encoding() {
		return Encoding.CP1252;
	}
}
