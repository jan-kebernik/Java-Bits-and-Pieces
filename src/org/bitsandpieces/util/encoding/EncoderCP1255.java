/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bitsandpieces.util.encoding;

/**
 *
 * @author pp
 */
final class EncoderCP1255 extends SingleByteEncoder implements Encoder {

	// collision-free hash table for CP1255 char-to-byte conversion.
	// unless entry == INVALID_ID, highest 16 bits are used 
	// to verify key match, lowest byte is mapped byte.
	// only maps entries for keys >= 128 (non-ASCII range).
	private static final int[] TABLE = {
		0x20200086, INVALID_ID, 0x201e0084, INVALID_ID, 0x201c0093, INVALID_ID, 0x201a0082, INVALID_ID,
		0x20180091, INVALID_ID, INVALID_ID, INVALID_ID, 0x20140097, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, 0x05f400d8, 0x200e00fd, 0x05f200d6, INVALID_ID, 0x05f000d4, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x05ea00fa, INVALID_ID, 0x05e800f8, INVALID_ID, 0x05e600f6,
		INVALID_ID, 0x05e400f4, INVALID_ID, 0x05e200f2, INVALID_ID, 0x05e000f0, 0x02dc0098, 0x05de00ee,
		INVALID_ID, 0x05dc00ec, INVALID_ID, 0x05da00ea, INVALID_ID, 0x05d800e8, INVALID_ID, 0x05d600e6,
		INVALID_ID, 0x05d400e4, INVALID_ID, 0x05d200e2, INVALID_ID, 0x05d000e0, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x02c60088, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, 0x00be00be, 0x05c200d2, 0x00bc00bc, 0x05c000d0, INVALID_ID, 0x05be00ce,
		0x00b800b8, 0x05bc00cc, 0x00b600b6, INVALID_ID, 0x00b400b4, 0x05b800c8, 0x00b200b2, 0x05b600c6,
		0x00b000b0, 0x05b400c4, 0x00ae00ae, 0x05b200c2, 0x00ac00ac, 0x05b000c0, INVALID_ID, INVALID_ID,
		0x00a800a8, INVALID_ID, 0x00a600a6, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a200a2, INVALID_ID,
		0x00a000a0, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x2039008b,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x01920083,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20ac0080, INVALID_ID, 0x20aa00a4, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20210087,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x201d0094, INVALID_ID, INVALID_ID, INVALID_ID, 0x20190092,
		INVALID_ID, 0x00f700ba, INVALID_ID, INVALID_ID, INVALID_ID, 0x20130096, INVALID_ID, INVALID_ID,
		INVALID_ID, 0x200f00fe, 0x05f300d7, INVALID_ID, 0x05f100d5, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x05e900f9, INVALID_ID, 0x05e700f7, INVALID_ID,
		0x05e500f5, INVALID_ID, 0x05e300f3, INVALID_ID, 0x05e100f1, INVALID_ID, 0x05df00ef, INVALID_ID,
		0x05dd00ed, 0x00d700aa, 0x05db00eb, INVALID_ID, 0x05d900e9, INVALID_ID, 0x05d700e7, INVALID_ID,
		0x05d500e5, INVALID_ID, 0x05d300e3, INVALID_ID, 0x05d100e1, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, 0x00bf00bf, 0x05c300d3, 0x00bd00bd, 0x05c100d1, 0x00bb00bb, 0x05bf00cf, 0x00b900b9,
		0x05bd00cd, 0x00b700b7, 0x05bb00cb, 0x00b500b5, 0x05b900c9, 0x00b300b3, 0x05b700c7, 0x00b100b1,
		0x05b500c5, 0x00af00af, 0x05b300c3, 0x00ad00ad, 0x05b100c1, 0x00ab00ab, INVALID_ID, 0x00a900a9,
		INVALID_ID, 0x00a700a7, INVALID_ID, 0x00a500a5, INVALID_ID, 0x00a300a3, INVALID_ID, 0x00a100a1,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x203a009b, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		0x20300089, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, 0x20260085, INVALID_ID, INVALID_ID, INVALID_ID, 0x20220095, 0x21220099
	};

	@Override
	int convert(int i) {
		return TABLE[(((i << 7) ^ (i >>> 8)) - i) & 0xff];
	}

	@Override
	public Encoding encoding() {
		return Encoding.CP1255;
	}
}
