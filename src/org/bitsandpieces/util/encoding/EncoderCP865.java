/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bitsandpieces.util.encoding;

/**
 *
 * @author pp
 */
final class EncoderCP865 extends SingleByteEncoder implements Encoder {

	// collision-free hash table for CP865 char-to-byte conversion.
	// unless entry == INVALID_ID, highest 16 bits are used 
	// to verify key match, lowest byte is mapped byte.
	// only maps entries for keys >= 128 (non-ASCII range).
	private static final int[] TABLE = {
		0x258000df, 0x226500f2, INVALID_ID, 0x00fb0096, INVALID_ID, 0x00f60094, INVALID_ID, 0x00f100a4,
		0x256c00ce, 0x00ec008d, 0x256700cf, 0x00e70087, 0x256200b6, 0x00e20083, 0x255d00bc, INVALID_ID,
		0x255800d4, 0x00d8009d, 0x255300d6, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c90090,
		0x03b500ee, 0x00c4008e, 0x232100f5, 0x00bf00a8, INVALID_ID, 0x00ba00a7, 0x03c400e7, 0x00b500e6,
		INVALID_ID, 0x00b000f8, 0x03a600e8, 0x00ab00ae, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a100ad,
		0x251c00c3, INVALID_ID, INVALID_ID, INVALID_ID, 0x259200b1, INVALID_ID, 0x0192009f, INVALID_ID,
		0x258800db, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00f90097,
		INVALID_ID, 0x00f40093, INVALID_ID, 0x00ef008b, 0x256a00d8, 0x00ea0088, 0x256500d2, 0x00e50086,
		0x256000cc, 0x00e00085, 0x255b00be, INVALID_ID, 0x255600b7, 0x00d60099, 0x255100ba, 0x00d100a5,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00c70080, INVALID_ID, INVALID_ID, INVALID_ID, 0x00bd00ab,
		0x03a900ea, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		0x252400b4, 0x00a400af, INVALID_ID, INVALID_ID, 0x231000a9, INVALID_ID, INVALID_ID, 0x251000bf,
		0x259000de, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x221a00fb, INVALID_ID,
		INVALID_ID, 0x00fc0081, INVALID_ID, 0x00f700f6, 0x222900ef, 0x00f20095, INVALID_ID, 0x00ed00a1,
		0x256800d0, 0x00e8008a, 0x256300b9, INVALID_ID, 0x255e00c6, INVALID_ID, 0x255900d3, INVALID_ID,
		0x255400c9, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00c5008f,
		0x03b100e0, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x03c000e3, 0x00b100f1,
		0x252c00c2, 0x00ac00aa, INVALID_ID, 0x224800f7, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		0x251800d9, INVALID_ID, 0x259300b2, INVALID_ID, 0x039300e2, INVALID_ID, 0x039800e9, INVALID_ID,
		0x258400dc, 0x226100f0, INVALID_ID, 0x00ff0098, INVALID_ID, 0x00fa00a3, INVALID_ID, INVALID_ID,
		INVALID_ID, 0x207f00fc, 0x256b00d7, 0x00eb0089, 0x256600cb, 0x00e60091, 0x256100b5, 0x00e100a0,
		0x255c00bd, 0x00dc009a, 0x255700bb, INVALID_ID, 0x255200d5, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, 0x20a7009e, INVALID_ID, 0x03c300e5, INVALID_ID, INVALID_ID, INVALID_ID,
		0x253400c1, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x00aa00a6, 0x03b400eb, INVALID_ID,
		0x25a000fe, 0x00a000ff, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x259100b0, 0x250c00da,
		0x258c00dd, INVALID_ID, INVALID_ID, 0x250200b3, 0x221900f9, INVALID_ID, 0x221e00ec, INVALID_ID,
		INVALID_ID, 0x00f8009b, INVALID_ID, 0x00f300a2, INVALID_ID, 0x00ee008c, 0x256900ca, 0x00e90082,
		0x256400d1, 0x00e40084, 0x255f00c7, 0x00df00e1, 0x255a00c8, INVALID_ID, 0x255500b8, INVALID_ID,
		0x255000cd, INVALID_ID, 0x03c600ed, 0x226400f3, INVALID_ID, 0x00c60092, INVALID_ID, INVALID_ID,
		0x253c00c5, 0x00bc00ac, INVALID_ID, 0x00b700fa, INVALID_ID, 0x00b200fd, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x00a3009c, 0x03a300e4, INVALID_ID, INVALID_ID, 0x251400c0,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x232000f4, INVALID_ID, INVALID_ID, 0x250000c4
	};

	@Override
	int convert(int i) {
		int m = i * 459366;
		return TABLE[(((m >>> 26) ^ m) - (i >>> 13)) & 0xff];
	}

	@Override
	public Encoding encoding() {
		return Encoding.CP865;
	}
}
