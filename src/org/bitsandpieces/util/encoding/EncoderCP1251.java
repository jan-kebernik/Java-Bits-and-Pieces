/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bitsandpieces.util.encoding;

/**
 *
 * @author pp
 */
final class EncoderCP1251 extends SingleByteEncoder implements Encoder {
	
	// collision-free hash table for CP1251 char-to-byte conversion.
	// unless entry == INVALID_ID, highest 16 bits are used 
	// to verify key match, lowest byte is mapped byte.
	// only maps entries for keys >= 128 (non-ASCII range).
	private static final int[] TABLE = {
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, 0x20180091, 0x20190092, 0x201a0082, INVALID_ID, 0x201c0093, 0x201d0094, 0x201e0084,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x20130096, 0x20140097, INVALID_ID, INVALID_ID,
		0x20260085, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, 0x20200086, 0x20210087, 0x20220095, INVALID_ID, INVALID_ID, 0x211600b9,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, 0x2039008b, 0x203a009b, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, 0x20300089, 0x21220099, INVALID_ID, INVALID_ID, INVALID_ID,
		0x040100a8, INVALID_ID, 0x04030081, 0x04020080, 0x040500bd, 0x040400aa, 0x040700af, 0x040600b2,
		0x0409008a, 0x040800a3, 0x040b008e, 0x040a008c, INVALID_ID, 0x040c008d, 0x040f008f, 0x040e00a1,
		0x041000c0, INVALID_ID, 0x041200c2, 0x041100c1, 0x041400c4, 0x041300c3, 0x041600c6, 0x041500c5,
		0x041800c8, 0x041700c7, 0x041a00ca, 0x041900c9, 0x041c00cc, 0x041b00cb, 0x041e00ce, 0x041d00cd,
		INVALID_ID, 0x041f00cf, 0x042100d1, 0x042000d0, 0x042300d3, 0x042200d2, 0x042500d5, 0x042400d4,
		0x042700d7, 0x042600d6, 0x042900d9, 0x042800d8, 0x042b00db, 0x042a00da, 0x042d00dd, 0x042c00dc,
		0x042f00df, 0x042e00de, 0x043000e0, INVALID_ID, 0x043200e2, 0x043100e1, 0x043400e4, 0x043300e3,
		0x043600e6, 0x043500e5, 0x043800e8, 0x043700e7, 0x043a00ea, 0x043900e9, 0x043c00ec, 0x043b00eb,
		0x043e00ee, 0x043d00ed, INVALID_ID, 0x043f00ef, 0x044100f1, 0x044000f0, 0x044300f3, 0x044200f2,
		0x044500f5, 0x044400f4, 0x044700f7, 0x044600f6, 0x044900f9, 0x044800f8, 0x044b00fb, 0x044a00fa,
		0x044d00fd, 0x044c00fc, 0x044f00ff, 0x044e00fe, INVALID_ID, INVALID_ID, 0x04520090, 0x045100b8,
		0x045400ba, 0x04530083, 0x045600b3, 0x045500be, 0x045800bc, 0x045700bf, 0x045a009c, 0x0459009a,
		0x045c009d, 0x045b009e, 0x045e00a2, INVALID_ID, INVALID_ID, 0x045f009f, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, 0x00a000a0, INVALID_ID, INVALID_ID, INVALID_ID, 0x00a400a4, INVALID_ID,
		0x00a600a6, 0x00a700a7, INVALID_ID, 0x00a900a9, INVALID_ID, 0x00ab00ab, 0x00ac00ac, 0x00ad00ad,
		0x00ae00ae, INVALID_ID, INVALID_ID, 0x00b000b0, 0x00b100b1, INVALID_ID, 0x20ac0088, INVALID_ID,
		0x00b500b5, 0x00b600b6, 0x00b700b7, INVALID_ID, INVALID_ID, INVALID_ID, 0x00bb00bb, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		0x049000a5, INVALID_ID, INVALID_ID, 0x049100b4, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID,
		INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID, INVALID_ID
	};

	@Override
	int convert(int c) {
		return TABLE[((((c << 4) + c) >>> 4) ^ (c >>> 10)) & 0xff];
	}

	@Override
	public Encoding encoding() {
		return Encoding.CP1251;
	}
}
